/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.4 (4.1)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
	"os"
)

// checks if the NetBoxAttachmentRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetBoxAttachmentRequest{}

// NetBoxAttachmentRequest Adds support for custom fields and tags.
type NetBoxAttachmentRequest struct {
	ObjectType           string   `json:"object_type"`
	ObjectId             int64    `json:"object_id"`
	Name                 *string  `json:"name,omitempty"`
	Description          *string  `json:"description,omitempty"`
	File                 *os.File `json:"file"`
	Comments             *string  `json:"comments,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NetBoxAttachmentRequest NetBoxAttachmentRequest

// NewNetBoxAttachmentRequest instantiates a new NetBoxAttachmentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetBoxAttachmentRequest(objectType string, objectId int64, file *os.File) *NetBoxAttachmentRequest {
	this := NetBoxAttachmentRequest{}
	this.ObjectType = objectType
	this.ObjectId = objectId
	this.File = file
	return &this
}

// NewNetBoxAttachmentRequestWithDefaults instantiates a new NetBoxAttachmentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetBoxAttachmentRequestWithDefaults() *NetBoxAttachmentRequest {
	this := NetBoxAttachmentRequest{}
	return &this
}

// GetObjectType returns the ObjectType field value
func (o *NetBoxAttachmentRequest) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *NetBoxAttachmentRequest) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *NetBoxAttachmentRequest) SetObjectType(v string) {
	o.ObjectType = v
}

// GetObjectId returns the ObjectId field value
func (o *NetBoxAttachmentRequest) GetObjectId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value
// and a boolean to check if the value has been set.
func (o *NetBoxAttachmentRequest) GetObjectIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectId, true
}

// SetObjectId sets field value
func (o *NetBoxAttachmentRequest) SetObjectId(v int64) {
	o.ObjectId = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NetBoxAttachmentRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetBoxAttachmentRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NetBoxAttachmentRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NetBoxAttachmentRequest) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *NetBoxAttachmentRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetBoxAttachmentRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *NetBoxAttachmentRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *NetBoxAttachmentRequest) SetDescription(v string) {
	o.Description = &v
}

// GetFile returns the File field value
func (o *NetBoxAttachmentRequest) GetFile() *os.File {
	if o == nil {
		var ret *os.File
		return ret
	}

	return o.File
}

// GetFileOk returns a tuple with the File field value
// and a boolean to check if the value has been set.
func (o *NetBoxAttachmentRequest) GetFileOk() (**os.File, bool) {
	if o == nil {
		return nil, false
	}
	return &o.File, true
}

// SetFile sets field value
func (o *NetBoxAttachmentRequest) SetFile(v *os.File) {
	o.File = v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *NetBoxAttachmentRequest) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetBoxAttachmentRequest) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *NetBoxAttachmentRequest) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *NetBoxAttachmentRequest) SetComments(v string) {
	o.Comments = &v
}

func (o NetBoxAttachmentRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetBoxAttachmentRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object_type"] = o.ObjectType
	toSerialize["object_id"] = o.ObjectId
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["file"] = o.File
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NetBoxAttachmentRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object_type",
		"object_id",
		"file",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetBoxAttachmentRequest := _NetBoxAttachmentRequest{}

	err = json.Unmarshal(data, &varNetBoxAttachmentRequest)

	if err != nil {
		return err
	}

	*o = NetBoxAttachmentRequest(varNetBoxAttachmentRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "object_type")
		delete(additionalProperties, "object_id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "file")
		delete(additionalProperties, "comments")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetBoxAttachmentRequest struct {
	value *NetBoxAttachmentRequest
	isSet bool
}

func (v NullableNetBoxAttachmentRequest) Get() *NetBoxAttachmentRequest {
	return v.value
}

func (v *NullableNetBoxAttachmentRequest) Set(val *NetBoxAttachmentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNetBoxAttachmentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNetBoxAttachmentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetBoxAttachmentRequest(val *NetBoxAttachmentRequest) *NullableNetBoxAttachmentRequest {
	return &NullableNetBoxAttachmentRequest{value: val, isSet: true}
}

func (v NullableNetBoxAttachmentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetBoxAttachmentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
